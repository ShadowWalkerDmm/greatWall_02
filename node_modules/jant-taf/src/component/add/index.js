"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const strings_1 = require("@angular-devkit/core/src/utils/strings");
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function add(options) {
    const { table, projectName, parent, tafConfig } = options;
    console.log("add table = ", options);
    const componentType = "add";
    const componentName_class = (0, strings_1.classify)(componentType) + (0, strings_1.classify)(table.table); //"ListLivre"
    const componentName = (0, strings_1.dasherize)(componentName_class);
    const fullComponentName = parent + (0, strings_1.dasherize)(table.table) + "/" + componentName; // home/auteur/list-auteur
    return (tree) => {
        // Le composant existe dèja
        let c_path = `/src/app/${fullComponentName}/${componentName}.component.ts`;
        if (tree.exists(c_path)) {
            console.log(`Le composant ${componentName} existe dèja dans le module ${parent} : ${c_path}`);
            return tree;
        }
        // le composant n'existe pas encore
        return (0, schematics_1.chain)([
            // création du composant
            (0, schematics_1.externalSchematic)("@schematics/angular", "component", { project: projectName, name: fullComponentName, style: tafConfig.style }),
            // modification des fichiers
            (tree, _context) => {
                // modifier le fichier HTML
                tree.overwrite(`src/app/${fullComponentName}/${componentName}.component.html`, // home/auteur/lis-auteur/list-auteur.component.html
                get_html_content(table));
                // modifier le fichier TS
                tree.overwrite(`src/app/${fullComponentName}/${componentName}.component.ts`, // home/auteur/lis-auteur/list-auteur.component.ts
                get_ts_content(table, componentName_class, componentName, tafConfig));
            }
        ]);
    };
}
exports.add = add;
function get_ts_content(table, componentName_class, componentName, tafConfig) {
    let validators = table.table_descriptions.les_colonnes.map((une_colonne) => {
        if (une_colonne["Key"] != 'PRI' && !(une_colonne["Field"] == "created_at" && une_colonne["Default"] != "")) {
            if (une_colonne["Null"] == "NO") {
                return une_colonne["Field"] + ': ["", Validators.required]';
            }
            else {
                return une_colonne["Field"] + ': [""]';
            }
        }
        return undefined;
    }).filter((une_colonne) => une_colonne != undefined).join(",\n");
    return `
import { Component, EventEmitter, Output } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ApiService } from '../../../service/api/api.service';
@Component({
  selector: 'app-${componentName}',
  templateUrl: './${componentName}.component.html',
  styleUrls: ['./${componentName}.component.${tafConfig.style}']
})
export class ${componentName_class}Component {
  @Output()
  cb_add_${table.table}=new EventEmitter()
  reactiveForm_add_${table.table} !: FormGroup;
  submitted:boolean=false
  loading_add_${table.table} :boolean=false
  form_details: any = {}
  loading_get_details_add_${table.table}_form = false
  constructor(private formBuilder: FormBuilder,public api:ApiService) { }

  ngOnInit(): void {
      this.get_details_add_${table.table}_form()
      this.init_form()
  }
  init_form() {
      this.reactiveForm_add_${table.table}  = this.formBuilder.group({
          ${validators}
      });
  }

  // acces facile au champs de votre formulaire
  get f(): any { return this.reactiveForm_add_${table.table} .controls; }
  // validation du formulaire
  onSubmit_add_${table.table} () {
      this.submitted = true;
      console.log(this.reactiveForm_add_${table.table} .value)
      // stop here if form is invalid
      if (this.reactiveForm_add_${table.table} .invalid) {
          return;
      }
      var ${table.table} =this.reactiveForm_add_${table.table} .value
      this.add_${table.table} (${table.table} )
  }
  // vider le formulaire
  onReset_add_${table.table} () {
      this.submitted = false;
      this.reactiveForm_add_${table.table} .reset();
  }
  add_${table.table}(${table.table}: any) {
      this.loading_add_${table.table} = true;
      this.api.taf_post("${table.table}/add", ${table.table}, (reponse: any) => {
      this.loading_add_${table.table} = false;
      if (reponse.status) {
          console.log("Opération effectuée avec succés sur la table ${table.table}. Réponse= ", reponse);
          this.onReset_add_${table.table}()
          alert("Opération éffectuée avec succés")
          this.cb_add_${table.table}.emit({
            status:true,
            ${table.table}:reponse.data
          })
      } else {
          console.log("L\'opération sur la table ${table.table} a échoué. Réponse= ", reponse);
          alert("L'opération a echoué")
      }
    }, (error: any) => {
        this.loading_add_${table.table} = false;
    })
  }
  
  get_details_add_${table.table}_form() {
      this.loading_get_details_add_${table.table}_form = true;
      this.api.taf_post("${table.table}/get_form_details", {}, (reponse: any) => {
        if (reponse.status) {
          this.form_details = reponse.data
          console.log("Opération effectuée avec succés sur la table ${table.table}. Réponse= ", reponse);
        } else {
          console.log("L'opération sur la table ${table.table} a échoué. Réponse= ", reponse);
          alert("L'opération a echoué")
        }
        this.loading_get_details_add_${table.table}_form = false;
      }, (error: any) => {
      this.loading_get_details_add_${table.table}_form = false;
    })
  }
}
`;
}
function get_html_content(table) {
    let all_colonne = table.table_descriptions.les_colonnes.map((une_colonne) => {
        switch (une_colonne.Key) {
            case "PRI":
                break;
            case "MUL":
                return `<!-- champs ${une_colonne.Field} avec un control de validite : clé étrangère liée à la colonne ${une_colonne.Field} de la table ${une_colonne.referenced_table.table_name} -->
        <div class="form-group col-sm-6">
          <label >${une_colonne.referenced_table.table_name}</label>
          <select [ngClass]="{ 'is-invalid': submitted && f.${une_colonne.Field}.errors }" class="form-select" formControlName="${une_colonne.Field}">
            <option value="">Sélectionnez un(e) ${une_colonne.referenced_table.table_name}</option>
            <option [value]="one_${une_colonne.referenced_table.table_name}.${une_colonne.referenced_table.cle_primaire.Field}" *ngFor="let one_${une_colonne.referenced_table.table_name} of form_details.les_${une_colonne.referenced_table.table_name}s">{{"${une_colonne.referenced_table.table_name} N°"+one_${une_colonne.referenced_table.table_name}.${une_colonne.referenced_table.cle_primaire.Field}}}</option>
          </select>
          <div *ngIf="submitted && f.${une_colonne.Field}.errors" class="invalid-feedback">
            <div *ngIf="f.${une_colonne.Field}.errors.required">ce champ est obligatoire</div>
          </div>
        </div>`;
            default:
                if (une_colonne["Field"] == "created_at" && une_colonne["Default"] == "CURRENT_TIMESTAMP") {
                    return;
                }
                else {
                    return `<!-- ${une_colonne.Field} field avec un control de validite -->
          <div class="form-group col-sm-6">
          <label >${une_colonne.Field}</label>
          <input class="form-control" type="text"  formControlName="${une_colonne.Field}"  placeholder="${une_colonne.Field}"  [ngClass]="{ 'is-invalid': submitted && f.${une_colonne.Field}.errors }"/>
          <div *ngIf="submitted && f.${une_colonne.Field}.errors" class="invalid-feedback">
          <div *ngIf="f.${une_colonne.Field}.errors.required"> ${une_colonne.Field} est obligatoire </div>
          </div>
          </div>  `;
                }
        }
    })
        .join("\n");
    return `
<form  [formGroup]="reactiveForm_add_${table.table} " (ngSubmit)="onSubmit_add_${table.table} ()" #form_add_${table.table} ="ngForm" class="row">
  ${all_colonne}
</form>
<!-- vous pouvez valider votre formulaire n\'importe ou -->

<div class="text-center m-2">
    <button type="button" class="btn btn-primary m-2" [disabled]="loading_add_${table.table} "
        (click)="form_add_${table.table} .ngSubmit.emit()">{{loading_add_${table.table} ?"En cours ...":"Valider"}}</button>
    <button class="btn btn-secondary m-2" type="reset" (click)="onReset_add_${table.table} ()">Vider</button>
</div>
`;
}
//# sourceMappingURL=index.js.map