"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.list = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const strings_1 = require("@angular-devkit/core/src/utils/strings");
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function list(options) {
    const { table, projectName, parent, tafConfig } = options;
    //console.log("table = ", table)
    const componentType = "list";
    const componentName_class = (0, strings_1.classify)(componentType) + (0, strings_1.classify)(table.table); //"ListLivre"
    const componentName = (0, strings_1.dasherize)(componentName_class);
    const fullComponentName = parent + (0, strings_1.dasherize)(table.table) + "/" + componentName; // /home/auteur/list-auteur
    return (tree) => {
        // Le composant existe dèja
        let c_path = `/src/app/${fullComponentName}/${componentName}.component.ts`;
        if (tree.exists(c_path)) {
            console.log(`Le composant ${componentName} existe dèja dans le module ${parent} : ${c_path}`);
            return tree;
        }
        // le composant n'existe pas encore
        return (0, schematics_1.chain)([
            // création du composant
            (0, schematics_1.externalSchematic)("@schematics/angular", "component", { project: projectName, name: fullComponentName, style: tafConfig.style }),
            // modification des fichiers
            (tree, _context) => {
                // modifier le fichier HTML
                tree.overwrite(`src/app/${fullComponentName}/${componentName}.component.html`, // home/auteur/lis-auteur/list-auteur.component.html
                get_html_content(table));
                // modifier le fichier TS
                tree.overwrite(`src/app/${fullComponentName}/${componentName}.component.ts`, // home/auteur/lis-auteur/list-auteur.component.ts
                get_ts_content(table, componentName_class, componentName, tafConfig));
            }
        ]);
    };
}
exports.list = list;
function get_ts_content(table, componentName_class, componentName, tafConfig) {
    return `import { Component } from '@angular/core';
import { ApiService } from '../../../service/api/api.service';
@Component({
  selector: 'app-${componentName}',
  templateUrl: './${componentName}.component.html',
  styleUrls: ['./${componentName}.component.${tafConfig.style}']
})
export class ${componentName_class}Component {
  loading_get_${table.table} = false
  les_${table.table}s: any[] = []
  selected_${table.table}: any = undefined
  ${table.table}_to_edit: any = undefined
  loading_delete_${table.table} = false
  constructor(public api: ApiService,) {

  }
  ngOnInit(): void {
    this.get_${table.table}()
  }
  get_${table.table}() {
    this.loading_get_${table.table} = true;
    this.api.taf_post("${table.table}/get", {}, (reponse: any) => {
      if (reponse.status) {
        this.les_${table.table}s = reponse.data
        console.log("Opération effectuée avec succés sur la table ${table.table}. Réponse= ", reponse);
      } else {
        console.log("L\'opération sur la table ${table.table} a échoué. Réponse= ", reponse);
        alert("L'opération a echoué")
      }
      this.loading_get_${table.table} = false;
    }, (error: any) => {
      this.loading_get_${table.table} = false;
    })
  }

  after_add(event: any) {
    if (event.status) {
      this.les_${table.table}s.unshift(event.${table.table})
    } else {

    }
  }
  after_edit(params: any) {
    this.les_${table.table}s[this.les_${table.table}s.indexOf(this.${table.table}_to_edit)]=params.new_data
  }
  voir_plus(one_${table.table}: any) {
    this.selected_${table.table} = one_${table.table}
  }
  on_click_edit(one_${table.table}: any) {
    this.${table.table}_to_edit = one_${table.table}
  }
  on_close_modal_edit(){
    this.${table.table}_to_edit=undefined
  }
  delete_${table.table} (${table.table} : any){
    this.loading_delete_${table.table} = true;
    this.api.taf_post("${table.table}/delete", ${table.table},(reponse: any)=>{
      //when success
      if(reponse.status){
        console.log("Opération effectuée avec succés sur la table ${table.table} . Réponse = ",reponse)
        this.get_${table.table}()
        alert("Opération effectuée avec succés")
      }else{
        console.log("L\'opération sur la table ${table.table}  a échoué. Réponse = ",reponse)
        alert("L'opération a échouée")
      }
      this.loading_delete_${table.table} = false;
    },
    (error: any)=>{
      //when error
      console.log("Erreur inconnue! ",error)
      this.loading_delete_${table.table} = false;
    })
  }
}`;
}
function get_html_content(table) {
    let entete = table.description.map((une_colonne) => {
        return `<th scope="col">${une_colonne}</th>`;
    }).join("\n") + `<th scope="col">actions</th>`;
    let body = table.description.map((une_colonne) => {
        return `<td>{{one_${table.table}.${une_colonne}}}</td>`;
    }).join("\n") + `<td>
  <div class="dropdown">
    <button [disabled]="loading_delete_${table.table}" type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">{{loading_delete_${table.table}?"en cours ...":"actions"}}</button>
    <div class="dropdown-menu">
      <a (click)="on_click_edit(one_${table.table})" class="dropdown-item" data-bs-toggle="modal"
        data-bs-target="#modal_edit_${table.table}">
        <i class="bx bx-edit-alt me-1"></i>
        Modifier
      </a>
      <a class="dropdown-item" href="javascript:void(0);" (click)=delete_${table.table}({id_${table.table}:one_${table.table}.id_${table.table}})><i class="bx bx-trash me-1"></i>Supprimer</a>
    </div>
  </div>
</td>`;
    return `<!-- entete -->
<div class="d-flex align-items-center justify-content-between">
  <div class="fs-1">Les ${(0, strings_1.classify)(table.table)}s  - {{les_${table.table}s.length}}</div>
  <div class="d-flex">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modal_add_${table.table}">Ajouter ${(0, strings_1.classify)(table.table)}</button>
  </div>
</div>
<!-- list -->
<div class="table-responsive">
  <table class="table table-striped">
    <thead>
      <tr>
        ${entete}
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let one_${table.table} of les_${table.table}s">
        ${body}
      </tr>
    </tbody>
  </table>
</div>
<!-- ajout -->
<div class="modal fade" id="modal_add_${table.table}" data-bs-backdrop="static">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
      <div class="modal-content">
          <div class="modal-header " data-bs-theme="dark">
              <h1 class="modal-title fs-5">Ajouter ${(0, strings_1.classify)(table.table)}</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <app-add-${(0, strings_1.dasherize)(table.table)} (cb_add_${table.table})="after_add($event)"></app-add-${(0, strings_1.dasherize)(table.table)}>
          </div>
      </div>
  </div>
</div>
<!-- modification -->
<div class="modal fade" id="modal_edit_${table.table}" data-bs-backdrop="static">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header" data-bs-theme="dark">
        <h1 class="modal-title fs-5">Modifier ${(0, strings_1.classify)(table.table)}</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" (click)="on_close_modal_edit()"></button>
      </div>
      <div class="modal-body">
        <app-edit-${(0, strings_1.dasherize)(table.table)} *ngIf="${table.table}_to_edit" (cb_edit_${table.table})="after_edit($event)" [${table.table}_to_edit]="${table.table}_to_edit"></app-edit-${(0, strings_1.dasherize)(table.table)}>
      </div>
    </div>
  </div>
</div>
  `;
}
//# sourceMappingURL=index.js.map